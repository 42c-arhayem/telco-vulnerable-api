name: telco Audit

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
    build:
        runs-on: ubuntu-latest

        env:
            platformUrl: 'https://demolabs.42crunch.cloud'
            X42C_API_TOKEN: ${{ secrets.API_KEY }}
            config_name: 'base_config'
            platformService: 'services.demolabs.42crunch.cloud:8001'
            API_URL: 'https://cute-noble-boar.ngrok-free.app'
        steps:
          #checkout the code
          - name: Checkout code
            uses: actions/checkout@v3

          - name: 42Crunch REST API Static Security Testing
          # You may pin to the exact commit or the version.
          # uses: 42Crunch/api-security-audit-action@8f3291aee67d774baf12330d1bfe86af2c861a06
            uses: 42Crunch/api-security-audit-action@v3
            with:
              # The API token to access 42Crunch Platform.
              api-token: ${{ env.X42C_API_TOKEN }}
              # Minimum score for OpenAPI files.
              # min-score: # optional, default is 75
              # 42Crunch platform URL
              platform-url: ${{ env.platformUrl }}
              # Log level, one of: FATAL, ERROR, WARN, INFO, DEBUG
              # log-level: # optional, default is INFO
              # Share new API collections with everyone, one of: OFF, READ_ONLY, READ_WRITE
              # share-everyone: # optional, default is OFF
              # GitHub token for uploading results to Github Code Scanning
              # github-token: # optional, default is ${{ github.token }}
              # Upload results to Github Code Scanning
              # upload-to-code-scanning: # optional, default is false
              # If set to 'true', disables all local failure conditions (like minimum score) and fails execution only if the criteria defined in SQGs are not met.
              ignore-failures: false # optional, default is false
              # Set the root directory for the plugin
              # root-directory: # optional
              # Change the default collection name
              # default-collection-name: # optional
              # Writes Audit report in JSON format to a specified file
              json-report: audit-action-report-${{ github.run_id }}.json
              # List of tags to be set on the newly created APIs. Format "category1:name1 category2:name2", optional.
              api-tags: "ApiType:Telecom"
              # If set to 'true', forces to complete execution successfully even if a network error has occurred (such as a failure to connect to 4unch Platform, etc).
              # ignore-network-errors: # optional, default is false
              # If set to 'true', forces to complete execution successfully even if the failures conditions (like min-score or SQG criteria) you have set are met.
              # skip-local-checks: # optional, default is false
              # Writes SARIF report to a specified file
              # sarif-report: # optional, default is 
              # Set the maximum timeout (in seconds) for the audit report. Fail if the result isn't ready within that interval.
              # audit-timeout: # optional
          
          - name: Check Audit Summary Report
            id: Check_Audit
            run: |
              echo "Audit JSON Report:"
              echo ${{ github.workspace }}/audit-action-report-${{ github.run_id }}.json
              cat ${{ github.workspace }}/audit-action-report-${{ github.run_id }}.json
              apiId=$(jq -r '.audit.report["oas_files/telco-openapi-protection.json"].apiId' ${{ github.workspace }}/audit-action-report-${{ github.run_id }}.json)
              apiId2=$(jq -r '.audit.report["oas_files/telco-openapi-remediated.json"].apiId' ${{ github.workspace }}/audit-action-report-${{ github.run_id }}.json)
              echo "API Scan UUID: $apiId2"
              echo "API_scan_UUID=$apiId2" >> $GITHUB_OUTPUT
              echo "API Protection UUID: $apiId"
              echo "API_protection_UUID=$apiId" >> $GITHUB_OUTPUT

          # Fetch Telco API AliasId from the .42c/conf.yaml
          - name: Fetch API AliasId
            id: Fetch_API_AliasId
            run: |
              echo "Audit JSON Report:"
              cat ${{ github.workspace }}/.42c/conf.yaml
              aliasId=$(yq '.apis.["oas_files/telco-openapi-remediated.json"].alias' < ${{ github.workspace }}/.42c/conf.yaml)
              echo "Telco API AliasId: $aliasId"
              echo "::set-output name=API_ALIAS_ID::$aliasId"

          # Upload Scan V2 Configuration
          - name: Upload Scan Configuration and Fetch Token
            id: upload_scan_config
            run: |
              python3 ${{ github.workspace }}/scripts/conformance_scanv2.py \
                -c ${{ secrets.API_KEY }} \
                -p ${{ env.platformUrl }} \
                -a ${{ steps.Check_Audit.outputs.API_scan_UUID }} \
                -n ${{ env.config_name }} \
                -t scan_token.json \
                -f ${{ github.workspace }}/.42c/scan/${{ steps.Fetch_API_AliasId.outputs.API_ALIAS_ID }}/scanconf.json --action upload_conf
              scan_token=$(cat ${{ github.workspace }}/scan_token.json | jq -r '.scan_token')
              echo "SCAN_TOKEN=$scan_token" >> $GITHUB_ENV  # Save to GITHUB_ENV to pass between steps
              echo "Scan token is $scan_token"
              cat ${{ github.workspace }}/scan_token.json

          # Pull and Run 42Crunch Docker Image
          - name: Pull and Run 42Crunch Docker Image
            run: |
              echo "Scan token is $SCAN_TOKEN"
              docker pull 42crunch/scand-agent:v2
              docker run -e SCAN_TOKEN=$SCAN_TOKEN \
                -e SCAN42C_HOST=${{ env.API_URL }} \
                -e PLATFORM_SERVICE=${{ env.platformService }} \
                42crunch/scand-agent:v2
              echo "Scan report: ${{ env.platformUrl }}/apis/${{ steps.Check_Audit.outputs.API_scan_UUID }}/scan"

          - name: Reconfigure Protection
            id: Reconfigure_Protection
            run: |
              echo "Reconfiguring Protection"
              echo "API UUID: ${{ steps.Check_Audit.outputs.API_protection_UUID }}"
              API_UUID=${{ steps.Check_Audit.outputs.API_protection_UUID }}
              PLATFORM_URL=${{ env.platformUrl }}
              curl --request POST "$PLATFORM_URL/api/v1/apis/$API_protection_UUID/protection" \
                --header "Content-Type: application/json" \
                --header "X-API-KEY: ${{ env.X42C_API_TOKEN }}"